{"version":3,"file":"ngx-mistakes.js","sources":["ng://ngx-mistakes/lib/interfaces/errors.interface.ts","ng://ngx-mistakes/lib/utils/to-array.ts","ng://ngx-mistakes/lib/ngx-errors/ngx-errors.directive.ts","ng://ngx-mistakes/lib/ngx-errors/ngx-error.directive.ts","ng://ngx-mistakes/lib/ngx-errors.module.ts","ng://ngx-mistakes/lib/ngx-mistakes/ngx-mistakes.directive.ts","ng://ngx-mistakes/lib/ngx-mistakes/ngx-mistake.directive.ts","ng://ngx-mistakes/lib/ngx-mistakes.module.ts"],"sourcesContent":["import { AbstractControl } from '@angular/forms';\n\nexport type ErrorOptions = string | string[];\n\nexport interface ErrorDetails {\n  control: AbstractControl;\n  errorName: string;\n}\n","import { ErrorOptions } from '../interfaces/errors.interface';\n\nexport const toArray = (value: ErrorOptions): string[] =>\n  Array.isArray(value) ? value : [value];\n","import {\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  AfterViewInit\n} from '@angular/core';\nimport { FormGroupDirective, AbstractControl } from '@angular/forms';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { ErrorDetails, ErrorOptions } from '../interfaces/errors.interface';\nimport { toArray } from '../utils/to-array';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxErrors]',\n  exportAs: 'ngxErrors'\n})\nexport class NgxErrorsDirective implements OnChanges, OnDestroy, AfterViewInit {\n  @Input('ngxErrors') controlName: string;\n\n  subject = new BehaviorSubject<ErrorDetails>(null);\n  control: AbstractControl;\n  ready = false;\n\n  constructor(private form: FormGroupDirective) {}\n\n  get errors() {\n    if (!this.ready) {\n      return;\n    }\n    return this.control.errors;\n  }\n\n  get hasErrors() {\n    return !!this.errors;\n  }\n\n  hasError(name: string, conditions: ErrorOptions): boolean {\n    return this.checkPropState('invalid', name, conditions);\n  }\n\n  isValid(name: string, conditions: ErrorOptions): boolean {\n    return this.checkPropState('valid', name, conditions);\n  }\n\n  getError(name: string) {\n    if (!this.ready) {\n      return;\n    }\n    return this.control.getError(name);\n  }\n\n  private checkPropState(\n    prop: string,\n    name: string,\n    conditions: ErrorOptions\n  ): boolean {\n    if (!this.ready) {\n      return;\n    }\n    const controlPropsState =\n      !conditions ||\n      toArray(conditions).every((condition: string) => this.control[condition]);\n    if (name.charAt(0) === '*') {\n      return this.control[prop] && controlPropsState;\n    }\n    return prop === 'valid'\n      ? !this.control.hasError(name)\n      : this.control.hasError(name) && controlPropsState;\n  }\n\n  private checkStatus() {\n    const control = this.control;\n    const errors = control.errors;\n    this.ready = true;\n    if (!errors) {\n      return;\n    }\n    // tslint:disable-next-line:forin\n    for (const errorName in errors) {\n      this.subject.next({ control, errorName });\n    }\n  }\n\n  ngOnChanges() {\n    this.control = this.form.control.get(this.controlName);\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.checkStatus();\n      this.control.statusChanges.subscribe(this.checkStatus.bind(this));\n    });\n  }\n\n  ngOnDestroy() {\n    this.subject.unsubscribe();\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  OnDestroy,\n  DoCheck,\n  Inject,\n  HostBinding,\n  forwardRef\n} from '@angular/core';\n\nimport { Observable, Subscription, Subject, combineLatest } from 'rxjs';\nimport { filter, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { ErrorOptions } from '../interfaces/errors.interface';\nimport { toArray } from '../utils/to-array';\n\nimport { NgxErrorsDirective } from './ngx-errors.directive';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxError]'\n})\nexport class NgxErrorDirective implements OnInit, OnDestroy, DoCheck {\n  @Input() set ngxError(value: ErrorOptions) {\n    this.errorNames = toArray(value);\n  }\n\n  @Input() set when(value: ErrorOptions) {\n    this.rules = toArray(value);\n  }\n\n  @HostBinding('hidden') hidden = true;\n\n  rules: string[] = [];\n  errorNames: string[] = [];\n  subscription: Subscription;\n  // tslint:disable-next-line:variable-name\n  _states: Subject<string[]>;\n  states: Observable<string[]>;\n\n  constructor(\n    @Inject(forwardRef(() => NgxErrorsDirective))\n    private ngxErrors: NgxErrorsDirective\n  ) {}\n\n  ngOnInit() {\n    this._states = new Subject<string[]>();\n    this.states = this._states.asObservable().pipe(distinctUntilChanged());\n\n    const errors = this.ngxErrors.subject.pipe(\n      filter(obj => !!obj),\n      // tslint:disable-next-line:no-bitwise\n      filter(obj => !!~this.errorNames.indexOf(obj.errorName))\n    );\n\n    const states = this.states.pipe(\n      // tslint:disable-next-line:no-shadowed-variable no-bitwise\n      map(states => this.rules.every(rule => !!~states.indexOf(rule)))\n    );\n\n    this.subscription = combineLatest([states, errors]).subscribe(\n      // tslint:disable-next-line:no-shadowed-variable\n      ([states, errors]) => {\n        this.hidden = !(states && errors.control.hasError(errors.errorName));\n      }\n    );\n  }\n\n  ngDoCheck() {\n    this._states.next(\n      this.rules.filter(rule => (this.ngxErrors.control as any)[rule])\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NgxErrorDirective } from './ngx-errors/ngx-error.directive';\nimport { NgxErrorsDirective } from './ngx-errors/ngx-errors.directive';\n\nconst directives = [NgxErrorDirective, NgxErrorsDirective];\n\n@NgModule({\n  declarations: [...directives],\n  exports: [...directives]\n})\nexport class NgxErrorsModule {}\n","import {\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  AfterViewInit\n} from '@angular/core';\nimport { FormGroupDirective, AbstractControl, FormArray } from '@angular/forms';\n\nimport { BehaviorSubject } from 'rxjs';\n\nimport { ErrorDetails, ErrorOptions } from '../interfaces/errors.interface';\nimport { toArray } from '../utils/to-array';\n\n@Directive({\n  // tslint:disable-next-line: directive-selector\n  selector: '[ngxErrors]',\n  exportAs: 'ngxErrors'\n})\nexport class NgxMistakesDirective\n  implements OnChanges, OnDestroy, AfterViewInit {\n  @Input('ngxErrors') controlName: string;\n  @Input() arr: string;\n  @Input() idx: number;\n\n  subject = new BehaviorSubject<ErrorDetails>(null);\n  control: AbstractControl;\n  ready = false;\n\n  constructor(private form: FormGroupDirective) {}\n\n  get errors() {\n    if (!this.ready) {\n      return;\n    }\n    return this.control.errors;\n  }\n\n  get hasErrors() {\n    return !!this.errors;\n  }\n\n  hasError(name: string, conditions: ErrorOptions): boolean {\n    return this.checkPropState('invalid', name, conditions);\n  }\n\n  isValid(name: string, conditions: ErrorOptions): boolean {\n    return this.checkPropState('valid', name, conditions);\n  }\n\n  getError(name: string) {\n    if (!this.ready) {\n      return;\n    }\n    return this.control.getError(name);\n  }\n\n  private checkPropState(\n    prop: string,\n    name: string,\n    conditions: ErrorOptions\n  ): boolean {\n    if (!this.ready) {\n      return;\n    }\n    const controlPropsState =\n      !conditions ||\n      toArray(conditions).every((condition: string) => this.control[condition]);\n    if (name.charAt(0) === '*') {\n      return this.control[prop] && controlPropsState;\n    }\n    return prop === 'valid'\n      ? !this.control.hasError(name)\n      : this.control.hasError(name) && controlPropsState;\n  }\n\n  private checkStatus() {\n    const control = this.control;\n    const errors = control.errors;\n    this.ready = true;\n    if (!errors) {\n      return;\n    }\n    // tslint:disable-next-line:forin\n    for (const errorName in errors) {\n      this.subject.next({ control, errorName });\n    }\n  }\n\n  ngOnChanges() {\n    if (this.arr && !isNaN(this.idx)) {\n      const arr = this.form.control.get(this.arr) as FormArray;\n      if (arr) {\n        const control = arr.at(this.idx);\n        if (control) {\n          this.control = control.get(this.controlName);\n        }\n      }\n    } else {\n      this.control = this.form.control.get(this.controlName);\n    }\n  }\n\n  ngAfterViewInit() {\n    setTimeout(() => {\n      this.checkStatus();\n      this.control.statusChanges.subscribe(this.checkStatus.bind(this));\n    });\n  }\n\n  ngOnDestroy() {\n    this.subject.unsubscribe();\n  }\n}\n","import {\n  Directive,\n  Input,\n  OnInit,\n  OnDestroy,\n  DoCheck,\n  Inject,\n  HostBinding,\n  forwardRef\n} from '@angular/core';\n\nimport { Observable, Subscription, Subject, combineLatest } from 'rxjs';\nimport { filter, distinctUntilChanged, map } from 'rxjs/operators';\n\nimport { ErrorOptions } from '../interfaces/errors.interface';\nimport { toArray } from '../utils/to-array';\n\nimport { NgxMistakesDirective } from './ngx-mistakes.directive';\n\n@Directive({\n  // tslint:disable-next-line:directive-selector\n  selector: '[ngxError]'\n})\nexport class NgxMistakeDirective implements OnInit, OnDestroy, DoCheck {\n  @Input() set ngxError(value: ErrorOptions) {\n    this.errorNames = toArray(value);\n  }\n\n  @Input() set when(value: ErrorOptions) {\n    this.rules = toArray(value);\n  }\n\n  @HostBinding('hidden') hidden = true;\n\n  rules: string[] = [];\n  errorNames: string[] = [];\n  subscription: Subscription;\n  // tslint:disable-next-line:variable-name\n  _states: Subject<string[]>;\n  states: Observable<string[]>;\n\n  constructor(\n    @Inject(forwardRef(() => NgxMistakesDirective))\n    private ngxMistakes: NgxMistakesDirective\n  ) {}\n\n  ngOnInit() {\n    this._states = new Subject<string[]>();\n    this.states = this._states.asObservable().pipe(distinctUntilChanged());\n\n    const errors = this.ngxMistakes.subject.pipe(\n      filter(obj => !!obj),\n      // tslint:disable-next-line:no-bitwise\n      filter(obj => !!~this.errorNames.indexOf(obj.errorName))\n    );\n\n    const states = this.states.pipe(\n      // tslint:disable-next-line:no-shadowed-variable no-bitwise\n      map(states => this.rules.every(rule => !!~states.indexOf(rule)))\n    );\n\n    this.subscription = combineLatest([states, errors]).subscribe(\n      // tslint:disable-next-line:no-shadowed-variable\n      ([states, errors]) => {\n        this.hidden = !(states && errors.control.hasError(errors.errorName));\n      }\n    );\n  }\n\n  ngDoCheck() {\n    this._states.next(\n      this.rules.filter(rule => (this.ngxMistakes.control as any)[rule])\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { NgxMistakeDirective } from './ngx-mistakes/ngx-mistake.directive';\nimport { NgxMistakesDirective } from './ngx-mistakes/ngx-mistakes.directive';\n\nconst directives = [NgxMistakeDirective, NgxMistakesDirective];\n\n@NgModule({\n  declarations: [...directives],\n  exports: [...directives]\n})\nexport class NgxMistakesModule {}\n"],"names":["directives"],"mappings":";;;;;;;;;;;;;AAIA,2BAGC;;;IAFC,+BAAyB;;IACzB,iCAAkB;;;;;;;;ACJpB,IAAa,OAAO;;;;AAAG,UAAC,KAAmB;IACzC,OAAA,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC;CAAA,CAAA;;;;;;ACHxC;IA0BE,4BAAoB,IAAwB;QAAxB,SAAI,GAAJ,IAAI,CAAoB;QAJ5C,YAAO,GAAG,IAAI,eAAe,CAAe,IAAI,CAAC,CAAC;QAElD,UAAK,GAAG,KAAK,CAAC;KAEkC;IAEhD,sBAAI,sCAAM;;;;QAAV;YACE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACf,OAAO;aACR;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;SAC5B;;;OAAA;IAED,sBAAI,yCAAS;;;;QAAb;YACE,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;SACtB;;;OAAA;;;;;;IAED,qCAAQ;;;;;IAAR,UAAS,IAAY,EAAE,UAAwB;QAC7C,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;KACzD;;;;;;IAED,oCAAO;;;;;IAAP,UAAQ,IAAY,EAAE,UAAwB;QAC5C,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;KACvD;;;;;IAED,qCAAQ;;;;IAAR,UAAS,IAAY;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO;SACR;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACpC;;;;;;;;IAEO,2CAAc;;;;;;;IAAtB,UACE,IAAY,EACZ,IAAY,EACZ,UAAwB;QAH1B,iBAiBC;QAZC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO;SACR;;YACK,iBAAiB,GACrB,CAAC,UAAU;YACX,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK;;;;YAAC,UAAC,SAAiB,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAA,EAAC;QAC3E,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC;SAChD;QACD,OAAO,IAAI,KAAK,OAAO;cACnB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;cAC5B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC;KACtD;;;;;IAEO,wCAAW;;;;IAAnB;;YACQ,OAAO,GAAG,IAAI,CAAC,OAAO;;YACtB,MAAM,GAAG,OAAO,CAAC,MAAM;QAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;;QAED,KAAK,IAAM,SAAS,IAAI,MAAM,EAAE;YAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;SAC3C;KACF;;;;IAED,wCAAW;;;IAAX;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACxD;;;;IAED,4CAAe;;;IAAf;QAAA,iBAKC;QAJC,UAAU;;;QAAC;YACT,KAAI,CAAC,WAAW,EAAE,CAAC;YACnB,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;SACnE,EAAC,CAAC;KACJ;;;;IAED,wCAAW;;;IAAX;QACE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;KAC5B;;gBArFF,SAAS,SAAC;;oBAET,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,WAAW;iBACtB;;;;gBAXQ,kBAAkB;;;8BAaxB,KAAK,SAAC,WAAW;;IAgFpB,yBAAC;CAtFD,IAsFC;;;IAhFC,yCAAwC;;IAExC,qCAAkD;;IAClD,qCAAyB;;IACzB,mCAAc;;;;;IAEF,kCAAgC;;;;;;;;ICe5C,2BAEU,SAA6B;QAA7B,cAAS,GAAT,SAAS,CAAoB;QAXhB,WAAM,GAAG,IAAI,CAAC;QAErC,UAAK,GAAa,EAAE,CAAC;QACrB,eAAU,GAAa,EAAE,CAAC;KAStB;IApBJ,sBAAa,uCAAQ;;;;;QAArB,UAAsB,KAAmB;YACvC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;SAClC;;;OAAA;IAED,sBAAa,mCAAI;;;;;QAAjB,UAAkB,KAAmB;YACnC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;SAC7B;;;OAAA;;;;IAgBD,oCAAQ;;;IAAR;QAAA,iBAqBC;QApBC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,EAAY,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;;YAEjE,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CACxC,MAAM;;;;QAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,GAAG,GAAA,EAAC;;QAEpB,MAAM;;;;QAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAA,EAAC,CACzD;;YAEK,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI;;QAE7B,GAAG;;;;QAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,KAAK;;;;QAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAA,EAAC,GAAA,EAAC,CACjE;QAED,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS;;;;;;;QAE3D,UAAC,EAAgB;gBAAhB,kBAAgB,EAAf,cAAM,EAAE,cAAM;YACd,KAAI,CAAC,MAAM,GAAG,EAAE,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;SACtE,EACF,CAAC;KACH;;;;IAED,qCAAS;;;IAAT;QAAA,iBAIC;QAHC,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,IAAI,CAAC,KAAK,CAAC,MAAM;;;;QAAC,UAAA,IAAI,IAAI,OAAA,oBAAC,KAAI,CAAC,SAAS,CAAC,OAAO,IAAS,IAAI,CAAC,GAAA,EAAC,CACjE,CAAC;KACH;;;;IAED,uCAAW;;;IAAX;QACE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACjC;;gBA1DF,SAAS,SAAC;;oBAET,QAAQ,EAAE,YAAY;iBACvB;;;;gBALQ,kBAAkB,uBAyBtB,MAAM,SAAC,UAAU;;;wBAAC,cAAM,OAAA,kBAAkB,GAAA,EAAC;;;2BAlB7C,KAAK;uBAIL,KAAK;yBAIL,WAAW,SAAC,QAAQ;;IA8CvB,wBAAC;CA3DD,IA2DC;;;IA9CC,mCAAqC;;IAErC,kCAAqB;;IACrB,uCAA0B;;IAC1B,yCAA2B;;IAE3B,oCAA2B;;IAC3B,mCAA6B;;;;;IAG3B,sCACqC;;;;;;;;ICtCnC,UAAU,GAAG,CAAC,iBAAiB,EAAE,kBAAkB,CAAC;AAE1D;IAAA;KAI+B;;gBAJ9B,QAAQ,SAAC;oBACR,YAAY,WAAM,UAAU,CAAC;oBAC7B,OAAO,WAAM,UAAU,CAAC;iBACzB;;IAC6B,sBAAC;CAJ/B;;;;;;ACPA;IA6BE,8BAAoB,IAAwB;QAAxB,SAAI,GAAJ,IAAI,CAAoB;QAJ5C,YAAO,GAAG,IAAI,eAAe,CAAe,IAAI,CAAC,CAAC;QAElD,UAAK,GAAG,KAAK,CAAC;KAEkC;IAEhD,sBAAI,wCAAM;;;;QAAV;YACE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;gBACf,OAAO;aACR;YACD,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;SAC5B;;;OAAA;IAED,sBAAI,2CAAS;;;;QAAb;YACE,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;SACtB;;;OAAA;;;;;;IAED,uCAAQ;;;;;IAAR,UAAS,IAAY,EAAE,UAAwB;QAC7C,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;KACzD;;;;;;IAED,sCAAO;;;;;IAAP,UAAQ,IAAY,EAAE,UAAwB;QAC5C,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;KACvD;;;;;IAED,uCAAQ;;;;IAAR,UAAS,IAAY;QACnB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO;SACR;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KACpC;;;;;;;;IAEO,6CAAc;;;;;;;IAAtB,UACE,IAAY,EACZ,IAAY,EACZ,UAAwB;QAH1B,iBAiBC;QAZC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,OAAO;SACR;;YACK,iBAAiB,GACrB,CAAC,UAAU;YACX,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK;;;;YAAC,UAAC,SAAiB,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAA,EAAC;QAC3E,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC;SAChD;QACD,OAAO,IAAI,KAAK,OAAO;cACnB,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;cAC5B,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,iBAAiB,CAAC;KACtD;;;;;IAEO,0CAAW;;;;IAAnB;;YACQ,OAAO,GAAG,IAAI,CAAC,OAAO;;YACtB,MAAM,GAAG,OAAO,CAAC,MAAM;QAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;;QAED,KAAK,IAAM,SAAS,IAAI,MAAM,EAAE;YAC9B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,OAAO,SAAA,EAAE,SAAS,WAAA,EAAE,CAAC,CAAC;SAC3C;KACF;;;;IAED,0CAAW;;;IAAX;QACE,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;gBAC1B,GAAG,sBAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAa;YACxD,IAAI,GAAG,EAAE;;oBACD,OAAO,GAAG,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;gBAChC,IAAI,OAAO,EAAE;oBACX,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;iBAC9C;aACF;SACF;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACxD;KACF;;;;IAED,8CAAe;;;IAAf;QAAA,iBAKC;QAJC,UAAU;;;QAAC;YACT,KAAI,CAAC,WAAW,EAAE,CAAC;YACnB,KAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;SACnE,EAAC,CAAC;KACJ;;;;IAED,0CAAW;;;IAAX;QACE,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;KAC5B;;gBAlGF,SAAS,SAAC;;oBAET,QAAQ,EAAE,aAAa;oBACvB,QAAQ,EAAE,WAAW;iBACtB;;;;gBAXQ,kBAAkB;;;8BAcxB,KAAK,SAAC,WAAW;sBACjB,KAAK;sBACL,KAAK;;IA0FR,2BAAC;CAnGD,IAmGC;;;IA5FC,2CAAwC;;IACxC,mCAAqB;;IACrB,mCAAqB;;IAErB,uCAAkD;;IAClD,uCAAyB;;IACzB,qCAAc;;;;;IAEF,oCAAgC;;;;;;;;ICY5C,6BAEU,WAAiC;QAAjC,gBAAW,GAAX,WAAW,CAAsB;QAXpB,WAAM,GAAG,IAAI,CAAC;QAErC,UAAK,GAAa,EAAE,CAAC;QACrB,eAAU,GAAa,EAAE,CAAC;KAStB;IApBJ,sBAAa,yCAAQ;;;;;QAArB,UAAsB,KAAmB;YACvC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;SAClC;;;OAAA;IAED,sBAAa,qCAAI;;;;;QAAjB,UAAkB,KAAmB;YACnC,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;SAC7B;;;OAAA;;;;IAgBD,sCAAQ;;;IAAR;QAAA,iBAqBC;QApBC,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,EAAY,CAAC;QACvC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;;YAEjE,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAC1C,MAAM;;;;QAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,GAAG,GAAA,EAAC;;QAEpB,MAAM;;;;QAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,CAAC,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAA,EAAC,CACzD;;YAEK,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI;;QAE7B,GAAG;;;;QAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,KAAK;;;;QAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,GAAA,EAAC,GAAA,EAAC,CACjE;QAED,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS;;;;;;;QAE3D,UAAC,EAAgB;gBAAhB,kBAAgB,EAAf,cAAM,EAAE,cAAM;YACd,KAAI,CAAC,MAAM,GAAG,EAAE,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC;SACtE,EACF,CAAC;KACH;;;;IAED,uCAAS;;;IAAT;QAAA,iBAIC;QAHC,IAAI,CAAC,OAAO,CAAC,IAAI,CACf,IAAI,CAAC,KAAK,CAAC,MAAM;;;;QAAC,UAAA,IAAI,IAAI,OAAA,oBAAC,KAAI,CAAC,WAAW,CAAC,OAAO,IAAS,IAAI,CAAC,GAAA,EAAC,CACnE,CAAC;KACH;;;;IAED,yCAAW;;;IAAX;QACE,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;KACjC;;gBA1DF,SAAS,SAAC;;oBAET,QAAQ,EAAE,YAAY;iBACvB;;;;gBALQ,oBAAoB,uBAyBxB,MAAM,SAAC,UAAU;;;wBAAC,cAAM,OAAA,oBAAoB,GAAA,EAAC;;;2BAlB/C,KAAK;uBAIL,KAAK;yBAIL,WAAW,SAAC,QAAQ;;IA8CvB,0BAAC;CA3DD,IA2DC;;;IA9CC,qCAAqC;;IAErC,oCAAqB;;IACrB,yCAA0B;;IAC1B,2CAA2B;;IAE3B,sCAA2B;;IAC3B,qCAA6B;;;;;IAG3B,0CACyC;;;;;;;;ICtCvCA,YAAU,GAAG,CAAC,mBAAmB,EAAE,oBAAoB,CAAC;AAE9D;IAAA;KAIiC;;gBAJhC,QAAQ,SAAC;oBACR,YAAY,WAAMA,YAAU,CAAC;oBAC7B,OAAO,WAAMA,YAAU,CAAC;iBACzB;;IAC+B,wBAAC;CAJjC;;;;;;;;;;;;;;"}